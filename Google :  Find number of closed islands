Solution 1:

class Solution {
    public:
    bool isValid(int i,int j,int n, int m,vector<vector<int>>& matrix){
        if(i>=0 && j>=0 && i<n && j<m && matrix[i][j]==1){
            return true;
        }
        return false;
    }
    void dfs(int i,int j,int n, int m,vector<vector<int>>& matrix){
        matrix[i][j]=0;
        int dx[4]={1,-1,0,0};
        int dy[4]={0,0,1,-1};
        for(int k=0;k<4;k++){
            int newX=i+dx[k];
            int newY=j+dy[k];
            if(isValid(newX,newY,n,m,matrix)){
                    dfs(newX,newY,n,m,matrix);
            }
        }
    }
    int closedIslands(vector<vector<int>>& matrix, int N, int M) {
        // Code here
        //boundary dfs
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(i*j==0 || i==N-1 || j==M-1){
                  if(matrix[i][j]==1){
                      dfs(i,j,N,M,matrix);
                  } 
                }
            }
        }
        int ans=0;
        //call dfs in whole grid
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(matrix[i][j]==1){
                    dfs(i,j,N,M,matrix);
                    ans++;
                }
            }
        }
        return ans;
    }
    
};



Solution 2:



class Solution {
    public:
    int ans = 0;
    
    void dfs(vector<vector<int>>& matrix, int n, int m, int i, int j, vector<vector<int>> &vis){
            vis[i][j] = 1;
            if((i-1>=0 && j>=0 && j<=m-1 && i-1<=n-1 && matrix[i-1][j] && (!vis[i-1][j]))){
                
                dfs(matrix, n, m, i-1, j, vis);
            }
            
            if((i+1>=0 && j>=0 && j<=m-1 && i+1<=n-1 && matrix[i+1][j] && (!vis[i+1][j]))){
                
                dfs(matrix, n, m, i+1, j, vis);
            }
            
            if((i>=0 && j-1>=0 && j-1<=m-1 && i<=n-1 && matrix[i][j-1] && (!vis[i][j-1]))){
                
                dfs(matrix, n, m, i, j-1, vis);
            }
            
            if((i>=0 && j+1>=0 && j+1<=m-1 && i<=n-1 && matrix[i][j+1] && (!vis[i][j+1]))){
                
                dfs(matrix, n, m, i, j+1, vis);
            }
             
             // No need to go diagonally as you have to go on boundary only.
             // This is for going diagonally but not needed.
             
            // if((i+1>=0 && j-1>=0 && j-1<=m-1 && i+1<=n-1 && matrix[i+1][j-1] && (vis[i+1][j-1] == 0))){
                
            //     dfs(matrix, n, m, i+1, j-1, vis);
            // }
            
            // if((i+1>=0 && j+1>=0 && j+1<=m-1 && i+1<=n-1 && matrix[i+1][j+1] && (!vis[i+1][j+1]))){
                
            //     dfs(matrix, n, m, i+1, j+1, vis);
            // }
            
            // if((i-1>=0 && j-1>=0 && j-1<=m-1 && i-1<=n-1 && matrix[i-1][j-1] && (!vis[i-1][j-1]))){
                
            //     dfs(matrix, n, m, i-1, j-1, vis);
            // }
            
            // if((i-1>=0 && j+1>=0 && j+1<=m-1 && i-1<=n-1 && matrix[i-1][j+1] && (!vis[i-1][j+1]))){
                
            //     dfs(matrix, n, m, i-1, j+1, vis);
            // }
            
        return ;
    }
    
    int closedIslands(vector<vector<int>>& matrix, int n, int m) {
        vector<vector<int>> vis(n, vector<int> (m,0));
        
        // DFS for Boundary and making all of the adjacent islands visited as they are not closed so ans is not increamented.
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i*j==0 || i==n-1 || j==m-1){
                   if(matrix[i][j]==1){
                       dfs(matrix, n, m, i, j, vis);
                   } 
                }
            }
        }
        
        // DFS for remaining grid.
        
        for(int i=0; i<n-1; i++){
            for(int j=1; j<m-1; j++){
                if(matrix[i][j]){
                    if(!vis[i][j]){
                        vis[i][j] = 1;
                        ans++;
                        dfs(matrix, n, m, i, j, vis);
                    }
                }
            }
        }
        return ans;
    }
};
