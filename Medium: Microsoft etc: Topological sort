// Graph Topological Sort



private:
    
    void dfs(int i, vector<int> adj[], stack<int> & st, vector<int> &vis){
        vis[i] = 1;
        
        for(int j=0; j<adj[i].size(); j++){
            if(vis[adj[i][j]]==0){
                dfs(adj[i][j], adj, st, vis);
            }
        }
        st.push(i);
        return;
    }
    
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) {
	    stack<int> st;
	    vector<int> vis(V,0);
	    for(int i=0; i<V; i++){
	        if(vis[i]==0){
	            dfs(i, adj, st, vis);
	        }
	    }
	    
	    vector<int> ans;
	    
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    
	    return ans;
	}
