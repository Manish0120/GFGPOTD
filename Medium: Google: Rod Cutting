// Dynamic Programming



private:
  int solve(int price[], int len, int n, vector<int>& dp){
      if(n==0)
          return 0;

      if(dp[n]!=0) return dp[n];

      int range = min(len, n);
      int ans = 0;

      for(int i=0; i<range; i++){

          ans = max(ans, price[i]+solve(price, len, n-i-1, dp));    
      }

      return dp[n] = ans;
  }
public:
  int cutRod(int price[], int n) {
      // int len = price.length();

      vector<int> dp(n+1, 0);

      return solve(price, n, n, dp);
  }
